enum MusicGenre {
undefined,
  acoustic,
  afrobeat,
  altRock,
  alternative,
  ambient,
  anime,
  blackMetal,
  bluegrass,
  blues,
  bossanova,
  brazil,
  breakbeat,
  british,
  cantopop,
  chicagoHouse,
  children,
  chill,
  classical,
  club,
  comedy,
  country,
  dance,
  dancehall,
  deathMetal,
  deepHouse,
  detroitTechno,
  disco,
  disney,
  drumAndBass,
  dub,
  dubstep,
  edm,
  electro,
  electronic,
  emo,
  folk,
  forro,
  french,
  funk,
  garage,
  german,
  gospel,
  goth,
  grindcore,
  groove,
  grunge,
  guitar,
  happy,
  hardRock,
  hardcore,
  hardstyle,
  heavyMetal,
  hipHop,
  holidays,
  honkyTonk,
  house,
  idm,
  indian,
  indie,
  indiePop,
  industrial,
  iranian,
  jDance,
  jIdol,
  jPop,
  jRock,
  jazz,
  kPop,
  kids,
  latin,
  latino,
  malay,
  mandopop,
  metal,
  metalMisc,
  metalcore,
  minimalTechno,
  movies,
  mpb,
  newAge,
  newRelease,
  opera,
  pagode,
  party,
  philippinesOpm,
  piano,
  pop,
  popFilm,
  postDubstep,
  powerPop,
  progressiveHouse,
  psychRock,
  punk,
  punkRock,
  rnb,
  rainyDay,
  reggae,
  reggaeton,
  roadTrip,
  rock,
  rockNRoll,
  rockabilly,
  romance,
  sad,
  salsa,
  samba,
  sertanejo,
  showTunes,
  singerSongwriter,
  ska,
  sleep,
  songwriter,
  soul,
  soundtracks,
  spanish,
  study,
  summer,
  swedish,
  synthPop,
  tango,
  techno,
  trance,
  tripHop,
  turkish,
  workOut,
  worldMusic,
}


List<MusicGenre> parseMusicGenre(String value) {
  List<MusicGenre> result = [];
  
  for (String genreName in value.split(' ')) {
    String normalizedGenre = genreName.toLowerCase().replaceAll('-', '');
    for (MusicGenre enumValue in MusicGenre.values) {
      String normalizedEnumValue = enumValue.toString().toLowerCase().replaceAll('-', '');
      if (normalizedEnumValue == normalizedGenre) {
        print("enfin !");
        result.add(enumValue);
        break; 
      }
    }
  }
  
  
  return result;
}